[tox]
# list of test environment to run when none is explicitly specified by the '-e' argument.
envlist = check,test
toxworkdir = {env:TOX_WORK_DIR:.tox}

# default configuration for all tox test environments
[testenv]
# make all other testenvs use the same virtualenv directory as there is no difference in dependencies
# and this reduces time required to build the same environment for every command
envdir = {toxworkdir}/default

# force use of specific Python version outside of Tox environment to be used by Tox itself
basepython = {env:PYTHON_BIN:python3.6}
usedevelop = True
# see requirements*.txt, hack to make git install work
deps =
  git+https://github.com/gorakhargosh/watchdog.git@d33bee0290e00ecb3570dd938db72a2550933586#egg=watchdog
  # git+https://gitlab.com/internet-cleanup-foundation/web-security-map.git#egg=websecmap
extras =
  development
  # allow setuptools extras (eg: deploy requirements) to be enabled in CI
  {env:TOX_EXTRAS:}
setenv =
  DJANGO_SETTINGS_MODULE = dashboard.settings
# allow broker url to be overriden for development
passenv = BROKER C_FORCE_ROOT DOCKER_HOST SYSTEM_TEST_TIMEOUT IMAGE SECRET_KEY FIELD_ENCRYPTION_KEY


# test set runs test suite and fixture integrity checks
[testenv:test]
commands =
  # run testsuite
  coverage run --include 'dashboard/*' -m pytest -v -k 'not integration and not system' {posargs}
  # generate coverage
  coverage report
  # and pretty html
  coverage html
  # ensure no model updates are commited without migrations
  dashboard makemigrations --check
passenv = SECRET_KEY FIELD_ENCRYPTION_KEY

# run code quality check
[testenv:check]
commands =
  # make sure code quality is up to par
  pylama dashboard tests setup.py --skip "**/migrations/*"

# ensure all datasets can be imported (and indirectly if all migrations work)
[testenv:datasets]
commands =
    # find all fixtures in source and verify loading each one
    /bin/sh -ec "find dashboard -path '*/fixtures/*.yaml' -print0 | \
        xargs -0n1 basename -s .yaml | uniq | \
        xargs -n1 dashboard test_dataset"

# ensure rebuild-ratings is deterministic
[testenv:deterministic]
commands = /bin/bash tools/compare_differences.sh HEAD HEAD tools/show_ratings.sh testdata

# utility to perform autofixing of trivial code quality issues
[testenv:autofix]
# install all dependencies so isort knows packages belong where
commands =
  # fix trivial pep8 style issues
  autopep8 -ri dashboard tests setup.py
  # remove unused imports
  autoflake -ri --remove-all-unused-imports dashboard tests setup.py
  # sort imports
  isort -rc dashboard tests setup.py
  # do a check after autofixing to show remaining problems
  pylama dashboard tests
  # check if all types have been defined somewhat correctly, taking in account django framework and typeshed stuff
  mypy dashboard

[testenv:integration]
setenv =
  {[testenv]setenv}
  DB_NAME = test.sqlite3
commands = pytest -v -k 'integration' {posargs}
passenv = SECRET_KEY FIELD_ENCRYPTION_KEY

[testenv:system]
envdir = {toxworkdir}/testenv-system
deps =
  pytest
  pytest-logging
  retry
usedevelop = False
skip_install = True
commands = pytest -v tests/system {posargs}
